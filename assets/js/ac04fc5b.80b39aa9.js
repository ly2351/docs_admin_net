"use strict";(self.webpackChunkdocs_admin_net=self.webpackChunkdocs_admin_net||[]).push([[887],{5404:(n,e,a)=>{a.d(e,{R:()=>i,x:()=>u});var r=a(6672);const t={},s=r.createContext(t);function i(n){const e=r.useContext(s);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function u(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:i(n.components),r.createElement(s.Provider,{value:e},n.children)}},5566:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>c,contentTitle:()=>u,default:()=>l,frontMatter:()=>i,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"backend/messagequeue","title":"19. \u6d88\u606f\u961f\u5217","description":"\u6d88\u606f\u961f\u5217\u987e\u540d\u601d\u4e49\u5c31\u662f\u4e00\u4e2a\u5b58\u653e\u6d88\u606f\u7684\u961f\u5217\u3002\u6700\u7b80\u5355\u7684\u6d88\u606f\u961f\u5217\u5305\u542b 3 \u4e2a\u89d2\u8272\uff1a","source":"@site/docs/backend/messagequeue.md","sourceDirName":"backend","slug":"/backend/messagequeue","permalink":"/docs_admin_net/docs/backend/messagequeue","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/backend/messagequeue.md","tags":[],"version":"current","sidebarPosition":19,"frontMatter":{"sidebar_position":19},"sidebar":"tutorialSidebar","previous":{"title":"18. \u90ae\u4ef6\u53d1\u9001","permalink":"/docs_admin_net/docs/backend/email"},"next":{"title":"20. \u5b9a\u65f6\u4efb\u52a1","permalink":"/docs_admin_net/docs/backend/timetask"}}');var t=a(3420),s=a(5404);const i={sidebar_position:19},u="19. \u6d88\u606f\u961f\u5217",c={},o=[{value:"\u4e8b\u4ef6\u603b\u7ebf",id:"\u4e8b\u4ef6\u603b\u7ebf",level:2},{value:"\u81ea\u5b9a\u4e49\u4e8b\u4ef6\u6e90\u5b58\u50a8\u5668",id:"\u81ea\u5b9a\u4e49\u4e8b\u4ef6\u6e90\u5b58\u50a8\u5668",level:2},{value:"RabbitMQ \u4e8b\u4ef6\u6e90\u5b58\u50a8\u5668",id:"rabbitmq-\u4e8b\u4ef6\u6e90\u5b58\u50a8\u5668",level:2},{value:"Redis \u4e8b\u4ef6\u6e90\u5b58\u50a8\u5668",id:"redis-\u4e8b\u4ef6\u6e90\u5b58\u50a8\u5668",level:2},{value:"Redis \u6d88\u606f\u961f\u5217",id:"redis-\u6d88\u606f\u961f\u5217",level:2}];function m(n){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"19-\u6d88\u606f\u961f\u5217",children:"19. \u6d88\u606f\u961f\u5217"})}),"\n",(0,t.jsxs)(e.admonition,{title:"\u63d0\u793a",type:"tip",children:[(0,t.jsx)(e.p,{children:"\u6d88\u606f\u961f\u5217\u987e\u540d\u601d\u4e49\u5c31\u662f\u4e00\u4e2a\u5b58\u653e\u6d88\u606f\u7684\u961f\u5217\u3002\u6700\u7b80\u5355\u7684\u6d88\u606f\u961f\u5217\u5305\u542b 3 \u4e2a\u89d2\u8272\uff1a"}),(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u751f\u4ea7\u8005\uff1a\u5c06\u6d88\u606f\u5b58\u5165\u961f\u5217\u4e2d"}),"\n",(0,t.jsx)(e.li,{children:"\u961f\u5217\uff1a\u5b58\u653e\u548c\u7ba1\u7406\u6d88\u606f"}),"\n",(0,t.jsx)(e.li,{children:"\u6d88\u8d39\u8005\uff1a \u5c06\u6d88\u606f\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u6765\u5e76\u505a\u4e1a\u52a1\u5904\u7406\u3002"}),"\n"]}),(0,t.jsx)(e.p,{children:"Admin.NET \u5df2\u7ecf\u96c6\u6210\u4e8b\u4ef6\u603b\u7ebf\u548c\u6d88\u606f\u961f\u5217\u3002\u4e8b\u4ef6\u603b\u7ebf\u662f\u5bf9\u53d1\u5e03-\u8ba2\u9605\u6a21\u5f0f\u7684\u4e00\u79cd\u5b9e\u73b0\u3002\u5b83\u662f\u4e00\u79cd\u96c6\u4e2d\u5f0f\u4e8b\u4ef6\u5904\u7406\u673a\u5236\uff0c\u5141\u8bb8\u4e0d\u540c\u7684\u7ec4\u4ef6\u4e4b\u95f4\u8fdb\u884c\u5f7c\u6b64\u901a\u4fe1\u800c\u53c8\u4e0d\u9700\u8981\u76f8\u4e92\u4f9d\u8d56\uff0c\u8fbe\u5230\u4e00\u79cd\u89e3\u8026\u7684\u76ee\u7684\u3002"})]}),"\n",(0,t.jsx)(e.h2,{id:"\u4e8b\u4ef6\u603b\u7ebf",children:"\u4e8b\u4ef6\u603b\u7ebf"}),"\n",(0,t.jsxs)(e.p,{children:["\u4e8b\u4ef6\u603b\u7ebf\u901a\u5e38\u7528\u4e8e\u8017\u65f6\u3001\u4e0d\u7528\u53ca\u65f6\u53cd\u9988\u7b49\u573a\u666f\uff0c\u6bd4\u5982\u767b\u5f55\u7684\u65f6\u5019\u53d1\u77ed\u4fe1\u3001\u53d1\u90ae\u4ef6\u3001\u901a\u77e5\u7b49\u7b49\uff0c\u4e0d\u9700\u8981\u7acb\u523b\u901a\u77e5\uff0c\u540e\u53f0\u5904\u7406\u5373\u53ef\u3002\u5b9a\u4e49\u4e8b\u4ef6\u8ba2\u9605\u8005 ",(0,t.jsx)(e.code,{children:"ToDoEventSubscriber"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'public class xxxSubscriber : IEventSubscriber\n{\n    private readonly ILogger<xxxSubscriber> _logger;\n    public xxxSubscriber(ILogger<xxxSubscriber> logger)\n    {\n        _logger = logger;\n    }\n\n    [EventSubscribe("ToDo:Add")]\n    public async Task AddToDo(EventHandlerExecutingContext context)\n    {\n        var todo = context.Source;\n        _logger.LogInformation("\u4e8b\u4ef6\u603b\u7ebf\uff1a{Name}", todo.Payload);\n        await Task.CompletedTask;\n    }\n}\n'})}),"\n",(0,t.jsxs)(e.p,{children:["\u4e0b\u9762\u662f\u6846\u67b6\u4e8b\u4ef6\u8ba2\u9605\u7684\u5b9e\u73b0\u793a\u4f8b ",(0,t.jsx)(e.code,{children:"Admin.NET.Core/EventBus/AppEventSubscriber.cs"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'namespace Admin.NET.Core;\n\n/// <summary>\n/// \u4e8b\u4ef6\u8ba2\u9605\n/// </summary>\npublic class AppEventSubscriber : IEventSubscriber, ISingleton, IDisposable\n{\n    private readonly IServiceScope _serviceScope;\n\n    public AppEventSubscriber(IServiceScopeFactory scopeFactory)\n    {\n        _serviceScope = scopeFactory.CreateScope();\n    }\n\n    /// <summary>\n    /// \u589e\u52a0\u5f02\u5e38\u65e5\u5fd7\n    /// </summary>\n    /// <param name="context"></param>\n    /// <returns></returns>\n    [EventSubscribe(CommonConst.AddExLog)]\n    public async Task CreateExLog(EventHandlerExecutingContext context)\n    {\n        var rep = _serviceScope.ServiceProvider.GetRequiredService<SqlSugarRepository<SysLogEx>>();\n        await rep.InsertAsync((SysLogEx)context.Source.Payload);\n    }\n\n    /// <summary>\n    /// \u53d1\u9001\u5f02\u5e38\u90ae\u4ef6\n    /// </summary>\n    /// <param name="context"></param>\n    /// <returns></returns>\n    [EventSubscribe(CommonConst.SendErrorMail)]\n    public async Task SendOrderErrorMail(EventHandlerExecutingContext context)\n    {\n        //var mailTempPath = Path.Combine(App.WebHostEnvironment.WebRootPath, "Temp\\\\ErrorMail.tp");\n        //var mailTemp = File.ReadAllText(mailTempPath);\n        //var mail = await _serviceScope.ServiceProvider.GetRequiredService<IViewEngine>().RunCompileFromCachedAsync(mailTemp, );\n\n        var title = "Admin.NET \u7cfb\u7edf\u5f02\u5e38";\n        await _serviceScope.ServiceProvider.GetRequiredService<SysEmailService>().SendEmail(JSON.Serialize(context.Source.Payload), title);\n    }\n\n    /// <summary>\n    /// \u91ca\u653e\u670d\u52a1\u4f5c\u7528\u57df\n    /// </summary>\n    public void Dispose()\n    {\n        _serviceScope.Dispose();\n    }\n}\n'})}),"\n",(0,t.jsxs)(e.p,{children:["\u4f9d\u8d56\u6ce8\u5165 ",(0,t.jsx)(e.code,{children:"IEventPublisher"})," \u670d\u52a1\uff0c\u6307\u5b9a\u4e8b\u4ef6\u8ba2\u9605\u540d\u79f0\u5373\u53ef\u53d1\u9001/\u6d88\u8d39\u6570\u636e"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'public class xxxController : ControllerBase\n{\n    private readonly IEventPublisher _eventPublisher;\n\n    public xxxController(IEventPublisher eventPublisher)\n    {\n        _eventPublisher = eventPublisher;\n    }\n\n    // \u53d1\u5e03 ToDo:Add \u6d88\u606f\n    public async Task AddDoTo(string name)\n    {\n        await _eventPublisher.PublishAsync(new ChannelEventSource("ToDo:Add", name));\n        \n        // await _eventPublisher.PublishDelayAsync(new ChannelEventSource("ToDo:Add", name), 5000); // \u5ef6\u8fdf 5s\n    }\n}\n'})}),"\n",(0,t.jsx)(e.admonition,{title:"\u63d0\u793a",type:"tip",children:(0,t.jsxs)(e.p,{children:["\u6240\u6709\u81ea\u5b9a\u4e49\u7684\u4e8b\u4ef6\u8ba2\u9605\u8005\u53ea\u9700\u8981\u5b9e\u73b0/\u7ee7\u627f ",(0,t.jsx)(e.code,{children:"ISingleton"})," \u63a5\u53e3\uff0c\u65e0\u9700\u624b\u52a8\u6ce8\u518c\u670d\u52a1\uff0c\u6846\u67b6\u5df2\u901a\u8fc7 ",(0,t.jsx)(e.code,{children:"services.AddEventBus()"})," \u5168\u5c40\u6ce8\u518c\u6240\u6709\u3002"]})}),"\n",(0,t.jsx)(e.h2,{id:"\u81ea\u5b9a\u4e49\u4e8b\u4ef6\u6e90\u5b58\u50a8\u5668",children:"\u81ea\u5b9a\u4e49\u4e8b\u4ef6\u6e90\u5b58\u50a8\u5668"}),"\n",(0,t.jsxs)(e.admonition,{title:"\u63d0\u793a",type:"tip",children:[(0,t.jsxs)(e.p,{children:["\u4e8b\u4ef6\u603b\u7ebf\u9ed8\u8ba4\u91c7\u7528 Channel \u4f5c\u4e3a\u4e8b\u4ef6\u6e90 IEventSource \u5b58\u50a8\u5668\uff0c\u53ef\u4f7f\u7528\u4efb\u4f55\u6d88\u606f\u961f\u5217\u7ec4\u4ef6\u8fdb\u884c\u66ff\u6362\uff0c\u5982 Kafka\u3001RabbitMQ\u3001Redis \u7b49\u3002Admin.NET \u5df2\u7ecf\u96c6\u6210 ",(0,t.jsx)(e.code,{children:"RabbitMQ"})," \u548c ",(0,t.jsx)(e.code,{children:"Redis"})," \u81ea\u5b9a\u4e49\u4e8b\u4ef6\u6e90\u5b58\u50a8\u5668\u3002"]}),(0,t.jsx)(e.h2,{id:"rabbitmq-\u4e8b\u4ef6\u6e90\u5b58\u50a8\u5668",children:"RabbitMQ \u4e8b\u4ef6\u6e90\u5b58\u50a8\u5668"}),(0,t.jsxs)(e.p,{children:["\u5177\u4f53 ",(0,t.jsx)(e.code,{children:"RabbitMQ"})," \u4e8b\u4ef6\u6e90\u5b9e\u73b0\u5982\u4e0b, \u914d\u7f6e\u6587\u4ef6 Configuration/EventBus.json"]}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\n  "$schema": "https://gitee.com/dotnetchina/Furion/raw/v4/schemas/v4/furion-schema.json",\n\n  "EventBus": {\n    "RabbitMQ": {\n      "UserName": "adminnet",\n      "Password": "adminnet++123456",\n      "HostName": "127.0.0.1",\n      "Port": 5672\n    }\n  }\n}\n'})}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'using RabbitMQ.Client;\nusing RabbitMQ.Client.Events;\nusing System.Threading.Channels;\n\nnamespace Admin.NET.Core;\n\n/// <summary>\n/// RabbitMQ\u81ea\u5b9a\u4e49\u4e8b\u4ef6\u6e90\u5b58\u50a8\u5668\n/// </summary>\npublic class RabbitMQEventSourceStore : IEventSourceStorer\n{\n    /// <summary>\n    /// \u5185\u5b58\u901a\u9053\u4e8b\u4ef6\u6e90\u5b58\u50a8\u5668\n    /// </summary>\n    private readonly Channel<IEventSource> _channel;\n\n    /// <summary>\n    /// \u901a\u9053\u5bf9\u8c61\n    /// </summary>\n    private readonly IModel _model;\n\n    /// <summary>\n    /// \u8fde\u63a5\u5bf9\u8c61\n    /// </summary>\n    private readonly IConnection _connection;\n\n    /// <summary>\n    /// \u8def\u7531\u952e\n    /// </summary>\n    private readonly string _routeKey;\n\n    /// <summary>\n    /// \u6784\u9020\u51fd\u6570\n    /// </summary>\n    /// <param name="factory">\u8fde\u63a5\u5de5\u5382</param>\n    /// <param name="routeKey">\u8def\u7531\u952e</param>\n    /// <param name="capacity">\u5b58\u50a8\u5668\u6700\u591a\u80fd\u591f\u5904\u7406\u591a\u5c11\u6d88\u606f\uff0c\u8d85\u8fc7\u8be5\u5bb9\u91cf\u8fdb\u5165\u7b49\u5f85\u5199\u5165</param>\n    public RabbitMQEventSourceStore(ConnectionFactory factory, string routeKey, int capacity)\n    {\n        // \u914d\u7f6e\u901a\u9053\uff0c\u8bbe\u7f6e\u8d85\u51fa\u9ed8\u8ba4\u5bb9\u91cf\u540e\u8fdb\u5165\u7b49\u5f85\n        var boundedChannelOptions = new BoundedChannelOptions(capacity)\n        {\n            FullMode = BoundedChannelFullMode.Wait\n        };\n\n        // \u521b\u5efa\u6709\u9650\u5bb9\u91cf\u901a\u9053\n        _channel = Channel.CreateBounded<IEventSource>(boundedChannelOptions);\n\n        // \u521b\u5efa\u8fde\u63a5\n        _connection = factory.CreateConnection();\n        _routeKey = routeKey;\n\n        // \u521b\u5efa\u901a\u9053\n        _model = _connection.CreateModel();\n\n        // \u58f0\u660e\u8def\u7531\u961f\u5217\n        _model.QueueDeclare(routeKey, false, false, false, null);\n\n        // \u521b\u5efa\u6d88\u606f\u8ba2\u9605\u8005\n        var consumer = new EventingBasicConsumer(_model);\n\n        // \u8ba2\u9605\u6d88\u606f\u5e76\u5199\u5165\u5185\u5b58 Channel\n        consumer.Received += (ch, ea) =>\n        {\n            // \u8bfb\u53d6\u539f\u59cb\u6d88\u606f\n            var stringEventSource = Encoding.UTF8.GetString(ea.Body.ToArray());\n\n            // \u8f6c\u6362\u4e3a IEventSource\uff0c\u5982\u679c\u81ea\u5b9a\u4e49\u4e86 EventSource\uff0c\u6ce8\u610f\u5c5e\u6027\u662f\u53ef\u8bfb\u53ef\u5199\n            var eventSource = JSON.Deserialize<ChannelEventSource>(stringEventSource);\n\n            // \u5199\u5165\u5185\u5b58\u7ba1\u9053\u5b58\u50a8\u5668\n            _channel.Writer.WriteAsync(eventSource);\n\n            // \u786e\u8ba4\u8be5\u6d88\u606f\u5df2\u88ab\u6d88\u8d39\n            _model.BasicAck(ea.DeliveryTag, false);\n        };\n\n        // \u542f\u52a8\u6d88\u8d39\u8005\u4e14\u8bbe\u7f6e\u4e3a\u624b\u52a8\u5e94\u7b54\u6d88\u606f\n        _model.BasicConsume(routeKey, false, consumer);\n    }\n\n    /// <summary>\n    /// \u5c06\u4e8b\u4ef6\u6e90\u5199\u5165\u5b58\u50a8\u5668\n    /// </summary>\n    /// <param name="eventSource">\u4e8b\u4ef6\u6e90\u5bf9\u8c61</param>\n    /// <param name="cancellationToken">\u53d6\u6d88\u4efb\u52a1 Token</param>\n    /// <returns><see cref="ValueTask"/></returns>\n    public async ValueTask WriteAsync(IEventSource eventSource, CancellationToken cancellationToken)\n    {\n        if (eventSource == default)\n            throw new ArgumentNullException(nameof(eventSource));\n\n        // \u5224\u65ad\u662f\u5426\u662f ChannelEventSource \u6216\u81ea\u5b9a\u4e49\u7684 EventSource\n        if (eventSource is ChannelEventSource source)\n        {\n            // \u5e8f\u5217\u5316\u53ca\u53d1\u5e03\n            var data = Encoding.UTF8.GetBytes(JSON.Serialize(source));\n            _model.BasicPublish("", _routeKey, null, data);\n        }\n        else\n        {\n            // \u5904\u7406\u52a8\u6001\u8ba2\u9605\n            await _channel.Writer.WriteAsync(eventSource, cancellationToken);\n        }\n    }\n\n    /// <summary>\n    /// \u4ece\u5b58\u50a8\u5668\u4e2d\u8bfb\u53d6\u4e00\u6761\u4e8b\u4ef6\u6e90\n    /// </summary>\n    /// <param name="cancellationToken">\u53d6\u6d88\u4efb\u52a1 Token</param>\n    /// <returns>\u4e8b\u4ef6\u6e90\u5bf9\u8c61</returns>\n    public async ValueTask<IEventSource> ReadAsync(CancellationToken cancellationToken)\n    {\n        var eventSource = await _channel.Reader.ReadAsync(cancellationToken);\n        return eventSource;\n    }\n\n    /// <summary>\n    /// \u91ca\u653e\u975e\u6258\u7ba1\u8d44\u6e90\n    /// </summary>\n    public void Dispose()\n    {\n        _model.Dispose();\n        _connection.Dispose();\n    }\n}\n'})}),(0,t.jsx)(e.h2,{id:"redis-\u4e8b\u4ef6\u6e90\u5b58\u50a8\u5668",children:"Redis \u4e8b\u4ef6\u6e90\u5b58\u50a8\u5668"}),(0,t.jsxs)(e.p,{children:["\u5177\u4f53 ",(0,t.jsx)(e.code,{children:"Redis"})," \u4e8b\u4ef6\u6e90\u5b9e\u73b0\u5982\u4e0b, \u914d\u7f6e\u6587\u4ef6 Configuration/Cache.json"]}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\n  "$schema": "https://gitee.com/dotnetchina/Furion/raw/v4/schemas/v4/furion-schema.json",\n\n  "Cache": {\n    "Prefix": "adminnet_", // \u5168\u5c40\u7f13\u5b58\u524d\u7f00\n    "CacheType": "Memory", // Memory\u3001Redis\n    "Redis": {\n      "Configuration": "server=127.0.0.1:6379;password=;db=5;", // Redis\u8fde\u63a5\u5b57\u7b26\u4e32\n      "Prefix": "adminnet_", // Redis\u524d\u7f00\uff08\u76ee\u524d\u6ca1\u7528\uff09\n      "MaxMessageSize": "1048576" // \u6700\u5927\u6d88\u606f\u5927\u5c0f \u9ed8\u8ba41024 * 1024\n    }\n  },\n  "Cluster": { // \u96c6\u7fa4\u914d\u7f6e\n    "Enabled": false, // \u542f\u7528\u96c6\u7fa4\uff1a\u524d\u63d0\u5f00\u542fRedis\u7f13\u5b58\u6a21\u5f0f\n    "ServerId": "adminnet", // \u670d\u52a1\u5668\u6807\u8bc6\n    "ServerIp": "", // \u670d\u52a1\u5668IP\n    "SignalR": {\n      "RedisConfiguration": "127.0.0.1:6379,ssl=false,password=,defaultDatabase=5",\n      "ChannelPrefix": "signalrPrefix_"\n    },\n    "DataProtecteKey": "AdminNet:DataProtection-Keys",\n    "IsSentinel": false, // \u662f\u5426\u54e8\u5175\u6a21\u5f0f\n    "SentinelConfig": {\n      "DefaultDb": "4",\n      "EndPoints": [ // \u54e8\u5175\u7aef\u53e3\n        // "10.10.0.124:26380"\n      ],\n      "MainPrefix": "adminNet:",\n      "Password": "123456",\n      "SentinelPassword": "adminNet",\n      "ServiceName": "adminNet",\n      "SignalRChannelPrefix": "signalR:"\n    }\n  }\n}\n'})}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'using System.Threading.Channels;\n\nnamespace Admin.NET.Core;\n\n/// <summary>\n/// Redis\u81ea\u5b9a\u4e49\u4e8b\u4ef6\u6e90\u5b58\u50a8\u5668\n/// </summary>\npublic sealed class RedisEventSourceStorer : IEventSourceStorer, IDisposable\n{\n    /// <summary>\n    /// \u6d88\u8d39\u8005\n    /// </summary>\n    private readonly EventConsumer<ChannelEventSource> _eventConsumer;\n\n    /// <summary>\n    /// \u5185\u5b58\u901a\u9053\u4e8b\u4ef6\u6e90\u5b58\u50a8\u5668\n    /// </summary>\n    private readonly Channel<IEventSource> _channel;\n\n    /// <summary>\n    /// Redis \u8fde\u63a5\u5bf9\u8c61\n    /// </summary>\n    private readonly FullRedis _redis;\n\n    /// <summary>\n    /// \u8def\u7531\u952e\n    /// </summary>\n    private readonly string _routeKey;\n\n    /// <summary>\n    /// \u6784\u9020\u51fd\u6570\n    /// </summary>\n    /// <param name="redis">Redis \u8fde\u63a5\u5bf9\u8c61</param>\n    /// <param name="routeKey">\u8def\u7531\u952e</param>\n    /// <param name="capacity">\u5b58\u50a8\u5668\u6700\u591a\u80fd\u591f\u5904\u7406\u591a\u5c11\u6d88\u606f\uff0c\u8d85\u8fc7\u8be5\u5bb9\u91cf\u8fdb\u5165\u7b49\u5f85\u5199\u5165</param>\n    public RedisEventSourceStorer(ICache redis, string routeKey, int capacity)\n    {\n        // \u914d\u7f6e\u901a\u9053\uff0c\u8bbe\u7f6e\u8d85\u51fa\u9ed8\u8ba4\u5bb9\u91cf\u540e\u8fdb\u5165\u7b49\u5f85\n        var boundedChannelOptions = new BoundedChannelOptions(capacity)\n        {\n            FullMode = BoundedChannelFullMode.Wait\n        };\n\n        // \u521b\u5efa\u6709\u9650\u5bb9\u91cf\u901a\u9053\n        _channel = Channel.CreateBounded<IEventSource>(boundedChannelOptions);\n\n        _redis = redis as FullRedis;\n        _routeKey = routeKey;\n\n        // \u521b\u5efa\u6d88\u606f\u8ba2\u9605\u8005\n        _eventConsumer = new EventConsumer<ChannelEventSource>(_redis, _routeKey);\n\n        // \u8ba2\u9605\u6d88\u606f\u5199\u5165 Channel\n        _eventConsumer.Received += (send, cr) =>\n        {\n            // \u53cd\u5e8f\u5217\u5316\u6d88\u606f\n            //var eventSource = JsonConvert.DeserializeObject<ChannelEventSource>(cr);\n\n            // \u5199\u5165\u5185\u5b58\u7ba1\u9053\u5b58\u50a8\u5668\n            Task.Run(async () =>\n            {\n                await _channel.Writer.WriteAsync(cr);\n            });\n        };\n\n        // \u542f\u52a8\u6d88\u8d39\u8005\n        _eventConsumer.Start();\n    }\n\n    /// <summary>\n    /// \u5c06\u4e8b\u4ef6\u6e90\u5199\u5165\u5b58\u50a8\u5668\n    /// </summary>\n    /// <param name="eventSource">\u4e8b\u4ef6\u6e90\u5bf9\u8c61</param>\n    /// <param name="cancellationToken">\u53d6\u6d88\u4efb\u52a1 Token</param>\n    /// <returns><see cref="ValueTask"/></returns>\n    public async ValueTask WriteAsync(IEventSource eventSource, CancellationToken cancellationToken)\n    {\n        // \u7a7a\u68c0\u67e5\n        if (eventSource == default)\n        {\n            throw new ArgumentNullException(nameof(eventSource));\n        }\n\n        // \u8fd9\u91cc\u5224\u65ad\u662f\u5426\u662f ChannelEventSource \u6216\u8005 \u81ea\u5b9a\u4e49\u7684 EventSource\n        if (eventSource is ChannelEventSource source)\n        {\n            // \u5e8f\u5217\u5316\u6d88\u606f\n            //var data = JsonSerializer.Serialize(source);\n\n            // \u83b7\u53d6\u4e00\u4e2a\u8ba2\u9605\u5bf9\u8c61\n            var queue = _redis.GetQueue<ChannelEventSource>(_routeKey);\n\n            // \u5f02\u6b65\u53d1\u5e03\n            await Task.Factory.StartNew(() =>\n            {\n                queue.Add(source);\n            }, cancellationToken, TaskCreationOptions.LongRunning, System.Threading.Tasks.TaskScheduler.Default);\n        }\n        else\n        {\n            // \u8fd9\u91cc\u5904\u7406\u52a8\u6001\u8ba2\u9605\u95ee\u9898\n            await _channel.Writer.WriteAsync(eventSource, cancellationToken);\n        }\n    }\n\n    /// <summary>\n    /// \u4ece\u5b58\u50a8\u5668\u4e2d\u8bfb\u53d6\u4e00\u6761\u4e8b\u4ef6\u6e90\n    /// </summary>\n    /// <param name="cancellationToken">\u53d6\u6d88\u4efb\u52a1 Token</param>\n    /// <returns>\u4e8b\u4ef6\u6e90\u5bf9\u8c61</returns>\n    public async ValueTask<IEventSource> ReadAsync(CancellationToken cancellationToken)\n    {\n        // \u8bfb\u53d6\u4e00\u6761\u4e8b\u4ef6\u6e90\n        var eventSource = await _channel.Reader.ReadAsync(cancellationToken);\n        return eventSource;\n    }\n\n    /// <summary>\n    /// \u91ca\u653e\u975e\u6258\u7ba1\u8d44\u6e90\n    /// </summary>\n    public async void Dispose()\n    {\n        await _eventConsumer.Stop();\n        GC.SuppressFinalize(this);\n    }\n}\n'})}),(0,t.jsx)(e.h2,{id:"redis-\u6d88\u606f\u961f\u5217",children:"Redis \u6d88\u606f\u961f\u5217"}),(0,t.jsx)(e.p,{children:"Admin.NET \u540c\u65f6\u4e5f\u96c6\u6210\u4e86 Redis \u6d88\u606f\u961f\u5217\u9759\u6001\u5de5\u5177\u7c7b\uff0c\u76f4\u63a5\u4f7f\u7528\u5373\u53ef\u3002"}),(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'using NewLife.Caching.Queues;\n\nnamespace Admin.NET.Core;\n\n/// <summary>\n/// Redis \u6d88\u606f\u961f\u5217\n/// </summary>\npublic static class RedisQueue\n{\n    private static readonly ICache _cache = App.GetRequiredService<ICache>();\n\n    /// <summary>\n    /// \u83b7\u53d6\u666e\u901a\u961f\u5217\n    /// </summary>\n    /// <typeparam name="T"></typeparam>\n    /// <param name="topic"></param>\n    /// <returns></returns>\n    public static IProducerConsumer<T> GetQueue<T>(string topic)\n    {\n        var queue = (_cache as FullRedis).GetQueue<T>(topic);\n        return queue;\n    }\n\n    /// <summary>\n    /// \u53d1\u9001\u4e00\u4e2a\u6570\u636e\u5230\u961f\u5217\n    /// </summary>\n    /// <typeparam name="T"></typeparam>\n    /// <param name="topic"></param>\n    /// <param name="value"></param>\n    /// <returns></returns>\n    public static int AddQueue<T>(string topic, T value)\n    {\n        var queue = GetQueue<T>(topic);\n        return queue.Add(value);\n    }\n\n    /// <summary>\n    /// \u53d1\u9001\u4e00\u4e2a\u6570\u636e\u5217\u8868\u5230\u961f\u5217\n    /// </summary>\n    /// <param name="topic"></param>\n    /// <param name="value"></param>\n    /// <typeparam name="T"></typeparam>\n    /// <returns></returns>\n    public static int AddQueueList<T>(string topic, List<T> value)\n    {\n        var queue = GetQueue<T>(topic);\n        var count = queue.Count;\n        var result = queue.Add(value.ToArray());\n        return result - count;\n    }\n\n    /// <summary>\n    /// \u83b7\u53d6\u4e00\u6279\u961f\u5217\u6d88\u606f\n    /// </summary>\n    /// <typeparam name="T"></typeparam>\n    /// <param name="topic"></param>\n    /// <param name="count"></param>\n    /// <returns></returns>\n    public static List<T> Take<T>(string topic, int count = 1)\n    {\n        var queue = GetQueue<T>(topic);\n        var result = queue.Take(count).ToList();\n        return result;\n    }\n\n    /// <summary>\n    /// \u83b7\u53d6\u4e00\u4e2a\u961f\u5217\u6d88\u606f\n    /// </summary>\n    /// <typeparam name="T"></typeparam>\n    /// <param name="topic"></param>\n    /// <returns></returns>\n    public static async Task<T> TakeOneAsync<T>(string topic)\n    {\n        var queue = GetQueue<T>(topic);\n        return await queue.TakeOneAsync(1);\n    }\n\n    /// <summary>\n    /// \u83b7\u53d6\u53ef\u4fe1\u961f\u5217\uff0c\u9700\u8981\u786e\u8ba4\n    /// </summary>\n    /// <typeparam name="T"></typeparam>\n    /// <param name="topic"></param>\n    /// <returns></returns>\n    public static RedisReliableQueue<T> GetRedisReliableQueue<T>(string topic)\n    {\n        var queue = (_cache as FullRedis).GetReliableQueue<T>(topic);\n        return queue;\n    }\n\n    /// <summary>\n    /// \u53ef\u4fe1\u961f\u5217\u56de\u6eda\n    /// </summary>\n    /// <param name="topic"></param>\n    /// <param name="retryInterval"></param>\n    /// <returns></returns>\n    public static int RollbackAllAck(string topic, int retryInterval = 60)\n    {\n        var queue = GetRedisReliableQueue<string>(topic);\n        queue.RetryInterval = retryInterval;\n        return queue.RollbackAllAck();\n    }\n\n    /// <summary>\n    /// \u53d1\u9001\u4e00\u4e2a\u6570\u636e\u5217\u8868\u5230\u53ef\u4fe1\u961f\u5217\n    /// </summary>\n    /// <param name="topic"></param>\n    /// <param name="value"></param>\n    /// <typeparam name="T"></typeparam>\n    /// <returns></returns>\n    public static int AddReliableQueueList<T>(string topic, List<T> value)\n    {\n        var queue = (_cache as FullRedis).GetReliableQueue<T>(topic);\n        var count = queue.Count;\n        var result = queue.Add(value.ToArray());\n        return result - count;\n    }\n\n    /// <summary>\n    /// \u53d1\u9001\u4e00\u6761\u6570\u636e\u5230\u53ef\u4fe1\u961f\u5217\n    /// </summary>\n    /// <param name="topic"></param>\n    /// <param name="value"></param>\n    /// <typeparam name="T"></typeparam>\n    /// <returns></returns>\n    public static int AddReliableQueue<T>(string topic, T value)\n    {\n        var queue = (_cache as FullRedis).GetReliableQueue<T>(topic);\n        var count = queue.Count;\n        var result = queue.Add(value);\n        return result - count;\n    }\n\n    /// <summary>\n    /// \u5728\u53ef\u4fe1\u961f\u5217\u83b7\u53d6\u4e00\u6761\u6570\u636e\n    /// </summary>\n    /// <param name="topic"></param>\n    /// <typeparam name="T"></typeparam>\n    /// <returns></returns>\n    public static T ReliableTakeOne<T>(string topic)\n    {\n        var queue = GetRedisReliableQueue<T>(topic);\n        return queue.TakeOne(1);\n    }\n\n    /// <summary>\n    /// \u5f02\u6b65\u5728\u53ef\u4fe1\u961f\u5217\u83b7\u53d6\u4e00\u6761\u6570\u636e\n    /// </summary>\n    /// <param name="topic"></param>\n    /// <typeparam name="T"></typeparam>\n    /// <returns></returns>\n    public static async Task<T> ReliableTakeOneAsync<T>(string topic)\n    {\n        var queue = GetRedisReliableQueue<T>(topic);\n        return await queue.TakeOneAsync(1);\n    }\n\n    /// <summary>\n    /// \u5728\u53ef\u4fe1\u961f\u5217\u83b7\u53d6\u591a\u6761\u6570\u636e\n    /// </summary>\n    /// <param name="topic"></param>\n    /// <param name="count"></param>\n    /// <typeparam name="T"></typeparam>\n    /// <returns></returns>\n    public static List<T> ReliableTake<T>(string topic, int count)\n    {\n        var queue = GetRedisReliableQueue<T>(topic);\n        return queue.Take(count).ToList();\n    }\n\n    /// <summary>\n    /// \u83b7\u53d6\u5ef6\u8fdf\u961f\u5217\n    /// </summary>\n    /// <param name="topic"></param>\n    /// <typeparam name="T"></typeparam>\n    /// <returns></returns>\n    public static RedisDelayQueue<T> GetDelayQueue<T>(string topic)\n    {\n        var queue = (_cache as FullRedis).GetDelayQueue<T>(topic);\n        return queue;\n    }\n\n    /// <summary>\n    /// \u53d1\u9001\u4e00\u6761\u6570\u636e\u5230\u5ef6\u8fdf\u961f\u5217\n    /// </summary>\n    /// <param name="topic"></param>\n    /// <param name="value"></param>\n    /// <param name="delay">\u5ef6\u8fdf\u65f6\u95f4\u3002\u5355\u4f4d\u79d2</param>\n    /// <typeparam name="T"></typeparam>\n    /// <returns></returns>\n    public static int AddDelayQueue<T>(string topic, T value, int delay)\n    {\n        var queue = GetDelayQueue<T>(topic);\n        return queue.Add(value, delay);\n    }\n\n    /// <summary>\n    /// \u53d1\u9001\u6570\u636e\u5217\u8868\u5230\u5ef6\u8fdf\u961f\u5217\n    /// </summary>\n    /// <param name="topic"></param>\n    /// <param name="value"></param>\n    /// <param name="delay"></param>\n    /// <typeparam name="T">\u5ef6\u8fdf\u65f6\u95f4\u3002\u5355\u4f4d\u79d2</typeparam>\n    /// <returns></returns>\n    public static int AddDelayQueue<T>(string topic, List<T> value, int delay)\n    {\n        var queue = GetDelayQueue<T>(topic);\n        queue.Delay = delay;\n        return queue.Add(value.ToArray());\n    }\n\n    /// <summary>\n    /// \u5f02\u6b65\u5728\u5ef6\u8fdf\u961f\u5217\u83b7\u53d6\u4e00\u6761\u6570\u636e\n    /// </summary>\n    /// <param name="topic"></param>\n    /// <typeparam name="T"></typeparam>\n    /// <returns></returns>\n    public static async Task<T> DelayTakeOne<T>(string topic)\n    {\n        var queue = GetDelayQueue<T>(topic);\n        return await queue.TakeOneAsync(1);\n    }\n\n    /// <summary>\n    /// \u5728\u5ef6\u8fdf\u961f\u5217\u83b7\u53d6\u591a\u6761\u6570\u636e\n    /// </summary>\n    /// <param name="topic"></param>\n    /// <param name="count"></param>\n    /// <typeparam name="T"></typeparam>\n    /// <returns></returns>\n    public static List<T> DelayTake<T>(string topic, int count = 1)\n    {\n        var queue = GetDelayQueue<T>(topic);\n        return queue.Take(count).ToList();\n    }\n}\n'})})]})]})}function l(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(m,{...n})}):m(n)}}}]);