"use strict";(self.webpackChunkdocs_admin_net=self.webpackChunkdocs_admin_net||[]).push([[1937],{5404:(n,e,a)=>{a.d(e,{R:()=>i,x:()=>c});var r=a(6672);const t={},s=r.createContext(t);function i(n){const e=r.useContext(s);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:i(n.components),r.createElement(s.Provider,{value:e},n.children)}},7050:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>m,contentTitle:()=>c,default:()=>o,frontMatter:()=>i,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"backend/cache","title":"4. \u7f13\u5b58\u7ba1\u7406","description":"Admin.NET \u652f\u6301\u5185\u5b58\u7f13\u5b58\u548c Redis \u7f13\u5b58\u4e24\u79cd\u6a21\u5f0f\uff0c\u53ef\u4ee5\u81ea\u7531\u5207\u6362\u81ea\u884c\u9009\u62e9\uff0c\u914d\u7f6e\u6587\u4ef6\u5728 /Configuration/Cache.json\u3002","source":"@site/docs/backend/cache.md","sourceDirName":"backend","slug":"/backend/cache","permalink":"/docs_admin_net/docs/backend/cache","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/backend/cache.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"3. \u5b9e\u4f53\u57fa\u7c7b","permalink":"/docs_admin_net/docs/backend/entitybase"},"next":{"title":"5. \u5bfc\u5165\u5bfc\u51fa","permalink":"/docs_admin_net/docs/backend/importexport"}}');var t=a(3420),s=a(5404);const i={sidebar_position:4},c="4. \u7f13\u5b58\u7ba1\u7406",m={},p=[];function u(n){const e={admonition:"admonition",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"4-\u7f13\u5b58\u7ba1\u7406",children:"4. \u7f13\u5b58\u7ba1\u7406"})}),"\n",(0,t.jsx)(e.admonition,{title:"\u63d0\u793a",type:"tip",children:(0,t.jsxs)(e.p,{children:["Admin.NET \u652f\u6301\u5185\u5b58\u7f13\u5b58\u548c Redis \u7f13\u5b58\u4e24\u79cd\u6a21\u5f0f\uff0c\u53ef\u4ee5\u81ea\u7531\u5207\u6362\u81ea\u884c\u9009\u62e9\uff0c\u914d\u7f6e\u6587\u4ef6\u5728 ",(0,t.jsx)(e.code,{children:"/Configuration/Cache.json"}),"\u3002"]})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'{\n  "$schema": "https://gitee.com/dotnetchina/Furion/raw/v4/schemas/v4/furion-schema.json",\n\n  "Cache": {\n    "Prefix": "adminnet_", // \u5168\u5c40\u7f13\u5b58\u524d\u7f00\n    "CacheType": "Memory", // Memory\u3001Redis\n    "Redis": {\n      "Configuration": "server=127.0.0.1:6379;password=;db=5;", // Redis\u8fde\u63a5\u5b57\u7b26\u4e32\n      "Prefix": "adminnet_", // Redis\u524d\u7f00\uff08\u76ee\u524d\u6ca1\u7528\uff09\n      "MaxMessageSize": "1048576" // \u6700\u5927\u6d88\u606f\u5927\u5c0f \u9ed8\u8ba41024 * 1024\n    }\n  },\n  "Cluster": { // \u96c6\u7fa4\u914d\u7f6e\n    "Enabled": false, // \u542f\u7528\u96c6\u7fa4\uff1a\u524d\u63d0\u5f00\u542fRedis\u7f13\u5b58\u6a21\u5f0f\n    "ServerId": "adminnet", // \u670d\u52a1\u5668\u6807\u8bc6\n    "ServerIp": "", // \u670d\u52a1\u5668IP\n    "SignalR": {\n      "RedisConfiguration": "127.0.0.1:6379,ssl=false,password=,defaultDatabase=5",\n      "ChannelPrefix": "signalrPrefix_"\n    },\n    "DataProtecteKey": "AdminNet:DataProtection-Keys",\n    "IsSentinel": false, // \u662f\u5426\u54e8\u5175\u6a21\u5f0f\n    "SentinelConfig": {\n      "DefaultDb": "4",\n      "EndPoints": [ // \u54e8\u5175\u7aef\u53e3\n        // "10.10.0.124:26380"\n      ],\n      "MainPrefix": "adminNet:",\n      "Password": "123456",\n      "SentinelPassword": "adminNet",\n      "ServiceName": "adminNet",\n      "SignalRChannelPrefix": "signalR:"\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"\u5148\u6ce8\u5165\u7f13\u5b58\u670d\u52a1\u7c7b, \u7136\u540e\u8fdb\u884c\u7f13\u5b58\u589e\u5220\u6539\u67e5\u3002\u81f3\u4e8e\u5f53\u524d\u7f13\u5b58\u662f\u5185\u5b58\u7f13\u5b58\u8fd8\u662f Redis \u6a21\u5f0f\u5b8c\u5168\u7531\u914d\u7f6e\u6587\u4ef6\u51b3\u5b9a\uff0c\u5e94\u7528\u64cd\u4f5c\u5c42\u65e0\u611f\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:"/// <summary>\n/// xxx\u670d\u52a1\n/// </summary>\n[ApiDescriptionSettings(Order = 100)]\npublic class xxxService : IDynamicApiController, ITransient\n{\n    private readonly SysCacheService _sysCacheService;\n\n    public xxxService(SysCacheService sysCacheService)\n    {\n        _sysCacheService = sysCacheService;\n    }\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:["\u8be5\u7f13\u5b58\u670d\u52a1\u7c7b\u5df2\u7ecf\u540c\u65f6\u5b9e\u73b0\u5185\u5b58\u7f13\u5b58\u548c Redis \u7f13\u5b58\u5e38\u7528\u5171\u540c\u7684\u63a5\u53e3\u3002\u5177\u4f53\u5b9e\u73b0\u5728 ",(0,t.jsx)(e.code,{children:"/Admin.NET.Core/Service/Cache/SysCacheService.cs"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'/// <summary>\n/// \u7cfb\u7edf\u7f13\u5b58\u670d\u52a1 \ud83e\udde9\n/// </summary>\n[ApiDescriptionSettings(Order = 400)]\npublic class SysCacheService : IDynamicApiController, ISingleton\n{\n    private readonly ICache _cache;\n    private readonly CacheOptions _cacheOptions;\n\n    public SysCacheService(ICache cache, IOptions<CacheOptions> cacheOptions)\n    {\n        _cache = cache;\n        _cacheOptions = cacheOptions.Value;\n    }\n\n    /// <summary>\n    /// \u83b7\u53d6\u7f13\u5b58\u952e\u540d\u96c6\u5408 \ud83d\udd16\n    /// </summary>\n    /// <returns></returns>\n    [DisplayName("\u83b7\u53d6\u7f13\u5b58\u952e\u540d\u96c6\u5408")]\n    public List<string> GetKeyList()\n    {\n        return _cache == Cache.Default\n            ? _cache.Keys.Where(u => u.StartsWith(_cacheOptions.Prefix)).Select(u => u[_cacheOptions.Prefix.Length..]).OrderBy(u => u).ToList()\n            : ((FullRedis)_cache).Search($"{_cacheOptions.Prefix}*", int.MaxValue).Select(u => u[_cacheOptions.Prefix.Length..]).OrderBy(u => u).ToList();\n    }\n\n    /// <summary>\n    /// \u589e\u52a0\u7f13\u5b58\n    /// </summary>\n    /// <param name="key"></param>\n    /// <param name="value"></param>\n    /// <returns></returns>\n    [NonAction]\n    public bool Set(string key, object value)\n    {\n        if (string.IsNullOrWhiteSpace(key)) return false;\n        return _cache.Set($"{_cacheOptions.Prefix}{key}", value);\n    }\n\n    /// <summary>\n    /// \u589e\u52a0\u7f13\u5b58\u5e76\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\n    /// </summary>\n    /// <param name="key"></param>\n    /// <param name="value"></param>\n    /// <param name="expire"></param>\n    /// <returns></returns>\n    [NonAction]\n    public bool Set(string key, object value, TimeSpan expire)\n    {\n        if (string.IsNullOrWhiteSpace(key)) return false;\n        return _cache.Set($"{_cacheOptions.Prefix}{key}", value, expire);\n    }\n\n    /// <summary>\n    /// \u83b7\u53d6\u7f13\u5b58\n    /// </summary>\n    /// <typeparam name="T"></typeparam>\n    /// <param name="key"></param>\n    /// <returns></returns>\n    [NonAction]\n    public T Get<T>(string key)\n    {\n        return _cache.Get<T>($"{_cacheOptions.Prefix}{key}");\n    }\n\n    /// <summary>\n    /// \u5220\u9664\u7f13\u5b58 \ud83d\udd16\n    /// </summary>\n    /// <param name="key"></param>\n    /// <returns></returns>\n    [ApiDescriptionSettings(Name = "Delete"), HttpPost]\n    [DisplayName("\u5220\u9664\u7f13\u5b58")]\n    public int Remove(string key)\n    {\n        return _cache.Remove($"{_cacheOptions.Prefix}{key}");\n    }\n\n    /// <summary>\n    /// \u68c0\u67e5\u7f13\u5b58\u662f\u5426\u5b58\u5728\n    /// </summary>\n    /// <param name="key">\u952e</param>\n    /// <returns></returns>\n    [NonAction]\n    public bool ExistKey(string key)\n    {\n        return _cache.ContainsKey($"{_cacheOptions.Prefix}{key}");\n    }\n\n    /// <summary>\n    /// \u6839\u636e\u952e\u540d\u524d\u7f00\u5220\u9664\u7f13\u5b58 \ud83d\udd16\n    /// </summary>\n    /// <param name="prefixKey">\u952e\u540d\u524d\u7f00</param>\n    /// <returns></returns>\n    [ApiDescriptionSettings(Name = "DeleteByPreKey"), HttpPost]\n    [DisplayName("\u6839\u636e\u952e\u540d\u524d\u7f00\u5220\u9664\u7f13\u5b58")]\n    public int RemoveByPrefixKey(string prefixKey)\n    {\n        var delKeys = _cache == Cache.Default\n            ? _cache.Keys.Where(u => u.StartsWith($"{_cacheOptions.Prefix}{prefixKey}")).ToArray()\n            : ((FullRedis)_cache).Search($"{_cacheOptions.Prefix}{prefixKey}*", int.MaxValue).ToArray();\n        return _cache.Remove(delKeys);\n    }\n\n    /// <summary>\n    /// \u6839\u636e\u952e\u540d\u524d\u7f00\u83b7\u53d6\u952e\u540d\u96c6\u5408 \ud83d\udd16\n    /// </summary>\n    /// <param name="prefixKey">\u952e\u540d\u524d\u7f00</param>\n    /// <returns></returns>\n    [DisplayName("\u6839\u636e\u952e\u540d\u524d\u7f00\u83b7\u53d6\u952e\u540d\u96c6\u5408")]\n    public List<string> GetKeysByPrefixKey(string prefixKey)\n    {\n        return _cache == Cache.Default\n            ? _cache.Keys.Where(u => u.StartsWith($"{_cacheOptions.Prefix}{prefixKey}")).Select(u => u[_cacheOptions.Prefix.Length..]).ToList()\n            : ((FullRedis)_cache).Search($"{_cacheOptions.Prefix}{prefixKey}*", int.MaxValue).Select(u => u[_cacheOptions.Prefix.Length..]).ToList();\n    }\n\n    /// <summary>\n    /// \u83b7\u53d6\u7f13\u5b58\u503c \ud83d\udd16\n    /// </summary>\n    /// <param name="key"></param>\n    /// <returns></returns>\n    [DisplayName("\u83b7\u53d6\u7f13\u5b58\u503c")]\n    public object GetValue(string key)\n    {\n        return _cache == Cache.Default\n            ? _cache.Get<object>($"{_cacheOptions.Prefix}{key}")\n            : _cache.Get<string>($"{_cacheOptions.Prefix}{key}");\n    }\n\n    /// <summary>\n    /// \u83b7\u53d6\u6216\u6dfb\u52a0\u7f13\u5b58\uff08\u5728\u6570\u636e\u4e0d\u5b58\u5728\u65f6\u6267\u884c\u59d4\u6258\u8bf7\u6c42\u6570\u636e\uff09\n    /// </summary>\n    /// <typeparam name="T"></typeparam>\n    /// <param name="key"></param>\n    /// <param name="callback"></param>\n    /// <param name="expire">\u8fc7\u671f\u65f6\u95f4\uff0c\u5355\u4f4d\u79d2</param>\n    /// <returns></returns>\n    [NonAction]\n    public T GetOrAdd<T>(string key, Func<string, T> callback, int expire = -1)\n    {\n        if (string.IsNullOrWhiteSpace(key)) return default;\n        return _cache.GetOrAdd($"{_cacheOptions.Prefix}{key}", callback, expire);\n    }\n\n    /// <summary>\n    /// Hash\u5339\u914d\n    /// </summary>\n    /// <typeparam name="T"></typeparam>\n    /// <param name="key"></param>\n    /// <returns></returns>\n    [NonAction]\n    public RedisHash<string, T> GetHashMap<T>(string key)\n    {\n        return _cache.GetDictionary<T>(key) as RedisHash<string, T>;\n    }\n\n    /// <summary>\n    /// \u6279\u91cf\u6dfb\u52a0HASH\n    /// </summary>\n    /// <typeparam name="T"></typeparam>\n    /// <param name="key"></param>\n    /// <param name="dic"></param>\n    /// <returns></returns>\n    [NonAction]\n    public bool HashSet<T>(string key, Dictionary<string, T> dic)\n    {\n        var hash = GetHashMap<T>(key);\n        return hash.HMSet(dic);\n    }\n\n    /// <summary>\n    /// \u6dfb\u52a0\u4e00\u6761HASH\n    /// </summary>\n    /// <typeparam name="T"></typeparam>\n    /// <param name="key"></param>\n    /// <param name="hashKey"></param>\n    /// <param name="value"></param>\n    [NonAction]\n    public void HashAdd<T>(string key, string hashKey, T value)\n    {\n        var hash = GetHashMap<T>(key);\n        hash.Add(hashKey, value);\n    }\n\n    /// <summary>\n    /// \u83b7\u53d6\u591a\u6761HASH\n    /// </summary>\n    /// <typeparam name="T"></typeparam>\n    /// <param name="key"></param>\n    /// <param name="fields"></param>\n    /// <returns></returns>\n    [NonAction]\n    public List<T> HashGet<T>(string key, params string[] fields)\n    {\n        var hash = GetHashMap<T>(key);\n        var result = hash.HMGet(fields);\n        return result.ToList();\n    }\n\n    /// <summary>\n    /// \u83b7\u53d6\u4e00\u6761HASH\n    /// </summary>\n    /// <typeparam name="T"></typeparam>\n    /// <param name="key"></param>\n    /// <param name="field"></param>\n    /// <returns></returns>\n    [NonAction]\n    public T HashGetOne<T>(string key, string field)\n    {\n        var hash = GetHashMap<T>(key);\n        var result = hash.HMGet(new string[] { field });\n        return result[0];\n    }\n\n    /// <summary>\n    /// \u6839\u636eKEY\u83b7\u53d6\u6240\u6709HASH\n    /// </summary>\n    /// <typeparam name="T"></typeparam>\n    /// <param name="key"></param>\n    /// <returns></returns>\n    [NonAction]\n    public IDictionary<string, T> HashGetAll<T>(string key)\n    {\n        var hash = GetHashMap<T>(key);\n        return hash.GetAll();\n    }\n\n    /// <summary>\n    /// \u5220\u9664HASH\n    /// </summary>\n    /// <typeparam name="T"></typeparam>\n    /// <param name="key"></param>\n    /// <param name="fields"></param>\n    /// <returns></returns>\n    [NonAction]\n    public int HashDel<T>(string key, params string[] fields)\n    {\n        var hash = GetHashMap<T>(key);\n        return hash.HDel(fields);\n    }\n\n    /// <summary>\n    /// \u641c\u7d22HASH\n    /// </summary>\n    /// <typeparam name="T"></typeparam>\n    /// <param name="key"></param>\n    /// <param name="searchModel"></param>\n    /// <returns></returns>\n    [NonAction]\n    public List<KeyValuePair<string, T>> HashSearch<T>(string key, SearchModel searchModel)\n    {\n        var hash = GetHashMap<T>(key);\n        return hash.Search(searchModel).ToList();\n    }\n\n    /// <summary>\n    /// \u641c\u7d22HASH\n    /// </summary>\n    /// <typeparam name="T"></typeparam>\n    /// <param name="key"></param>\n    /// <param name="pattern"></param>\n    /// <param name="count"></param>\n    /// <returns></returns>\n    [NonAction]\n    public List<KeyValuePair<string, T>> HashSearch<T>(string key, string pattern, int count)\n    {\n        var hash = GetHashMap<T>(key);\n        return hash.Search(pattern, count).ToList();\n    }\n}\n'})})]})}function o(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(u,{...n})}):u(n)}}}]);